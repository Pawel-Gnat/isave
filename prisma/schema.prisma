generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String   @db.ObjectId
  @@unique([provider, providerAccountId])
}

model User {
  id                     String               @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  email                  String               @unique
  emailVerified          DateTime?
  hashedPassword         String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  accounts               Account[]
  personalExpenses       PersonalExpenses[]
  personalIncomes        PersonalIncomes[]
}

model PersonalIncomes {
  id                     String               @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  date                   DateTime
  income                 Income[]
  user                   User?                @relation(fields: [userId], references: [id])
  userId                 String               @db.ObjectId
}

model Income {
  id                       String                  @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  value                    Int
  category                 String
  personalIncomes          PersonalIncomes?       @relation(fields: [personalIncomesId], references: [id], onDelete: Cascade)
  personalIncomesId        String                  @db.ObjectId
}

model PersonalExpenses {
  id                     String               @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  date                   DateTime
  expense                Expense[]
  user                   User?                @relation(fields: [userId], references: [id])
  userId                 String               @db.ObjectId
}

model Expense {
  id                       String                  @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  value                    Int
  category                 String
  personalExpense          PersonalExpenses?       @relation(fields: [personalExpenseId], references: [id], onDelete: Cascade)
  personalExpenseId        String                  @db.ObjectId
}