
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String   @db.ObjectId
  @@unique([provider, providerAccountId])
}

model User {
  id                     String               @id @default(auto()) @map("_id") @db.ObjectId
  inviteId               String               @unique
  name                   String
  email                  String               @unique
  emailVerified          Boolean              @default(false)
  hashedPassword         String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  accounts               Account[]
  personalExpenses       PersonalExpenses[]
  personalIncomes        PersonalIncomes[]
  ownedGroupBudgets      GroupBudget[]  
  groupExpenses          GroupExpenses[]
  groupIncomes           GroupIncomes[]    
  groupBudgetMember      GroupBudgetMember[]
  inviteNotification     InviteNotification[]        
}

model PersonalIncomes {
  id                     String               @id @default(auto()) @map("_id") @db.ObjectId
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  date                   DateTime
  transactions           PersonalIncomeProduct[]
  value                  Int
  user                   User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String               @db.ObjectId
}

model PersonalIncomeProduct {
  id                       String                 @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  title                    String
  value                    Int
  categoryId               String
  personalIncome           PersonalIncomes?       @relation(fields: [personalIncomeId], references: [id], onDelete: Cascade)
  personalIncomeId         String                 @db.ObjectId
}

model PersonalExpenses {
  id                     String               @id @default(auto()) @map("_id") @db.ObjectId
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  date                   DateTime
  value                  Int
  transactions           PersonalExpenseProduct[]
  user                   User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String               @db.ObjectId
}

model PersonalExpenseProduct {
  id                       String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  title                    String
  value                    Int
  categoryId               String
  personalExpense          PersonalExpenses?       @relation(fields: [personalExpenseId], references: [id], onDelete: Cascade)
  personalExpenseId        String                  @db.ObjectId
}

model GroupBudget {
  id                     String               @id @default(auto()) @map("_id") @db.ObjectId
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  name                   String
  ownerId                String               @db.ObjectId
  owner                  User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  InviteNotification     InviteNotification[]
  members                GroupBudgetMember[]  
  groupExpenses          GroupExpenses[]
  groupIncomes           GroupIncomes[]
}

model GroupBudgetMember {
  id                     String               @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String               @db.ObjectId
  user                   User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupBudgetId          String               @db.ObjectId
  groupBudget            GroupBudget          @relation(fields: [groupBudgetId], references: [id], onDelete: Cascade)
}

model GroupExpenses {
  id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  date                   DateTime
  value                  Int
  transactions           GroupExpenseProduct[]
  groupBudget            GroupBudget?             @relation(fields: [groupBudgetId], references: [id], onDelete: Cascade)
  groupBudgetId          String                   @db.ObjectId
  user                   User?                    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId                 String?                  @db.ObjectId
  userName               String
}

model GroupExpenseProduct {
  id                       String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  title                    String
  value                    Int
  categoryId               String
  groupExpense             GroupExpenses?          @relation(fields: [groupExpenseId], references: [id], onDelete: Cascade)
  groupExpenseId           String                  @db.ObjectId
}

model GroupIncomes {
  id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  date                   DateTime
  transactions           GroupIncomeProduct[]
  value                  Int
  groupBudget            GroupBudget?             @relation(fields: [groupBudgetId], references: [id], onDelete: Cascade)
  groupBudgetId          String                   @db.ObjectId
  user                   User?                    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId                 String?                  @db.ObjectId
  userName               String
}

model GroupIncomeProduct {
  id                       String                 @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  title                    String
  value                    Int
  categoryId               String
  groupIncome              GroupIncomes?          @relation(fields: [groupIncomeId], references: [id], onDelete: Cascade)
  groupIncomeId            String                 @db.ObjectId
}

model IncomeCategory {
  id                       String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  name                     String
  description              String
}

model ExpenseCategory {
  id                       String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  name                     String
  description              String
}

model InviteNotification {
  id                       String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  groupBudget              GroupBudget        @relation(fields: [groupBudgetId], references: [id], onDelete: Cascade)
  groupBudgetId            String             @db.ObjectId
  user                     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String             @db.ObjectId  
}

